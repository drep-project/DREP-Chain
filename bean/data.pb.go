// Code generated by protoc-gen-go. DO NOT EDIT.
// source: bean/data.proto

package bean

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import crypto "BlockChainTest/crypto"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type BlockHeader struct {
	Version              int32           `protobuf:"varint,1,opt,name=version,proto3" json:"version,omitempty"`
	PreviousHash         []byte          `protobuf:"bytes,2,opt,name=previous_hash,json=previousHash,proto3" json:"previous_hash,omitempty"`
	GasLimit             []byte          `protobuf:"bytes,3,opt,name=gas_limit,json=gasLimit,proto3" json:"gas_limit,omitempty"`
	GasUsed              []byte          `protobuf:"bytes,4,opt,name=gas_used,json=gasUsed,proto3" json:"gas_used,omitempty"`
	Height               int64           `protobuf:"varint,5,opt,name=height,proto3" json:"height,omitempty"`
	Timestamp            int64           `protobuf:"varint,6,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	MerkleRoot           []byte          `protobuf:"bytes,7,opt,name=merkle_root,json=merkleRoot,proto3" json:"merkle_root,omitempty"`
	TxHashes             [][]byte        `protobuf:"bytes,8,rep,name=tx_hashes,json=txHashes,proto3" json:"tx_hashes,omitempty"`
	LeaderPubKey         *crypto.Point   `protobuf:"bytes,9,opt,name=leader_pub_key,json=leaderPubKey,proto3" json:"leader_pub_key,omitempty"`
	MinorPubKeys         []*crypto.Point `protobuf:"bytes,10,rep,name=minor_pub_keys,json=minorPubKeys,proto3" json:"minor_pub_keys,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *BlockHeader) Reset()         { *m = BlockHeader{} }
func (m *BlockHeader) String() string { return proto.CompactTextString(m) }
func (*BlockHeader) ProtoMessage()    {}
func (*BlockHeader) Descriptor() ([]byte, []int) {
	return fileDescriptor_data_a77089e568de0f75, []int{0}
}
func (m *BlockHeader) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BlockHeader.Unmarshal(m, b)
}
func (m *BlockHeader) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BlockHeader.Marshal(b, m, deterministic)
}
func (dst *BlockHeader) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BlockHeader.Merge(dst, src)
}
func (m *BlockHeader) XXX_Size() int {
	return xxx_messageInfo_BlockHeader.Size(m)
}
func (m *BlockHeader) XXX_DiscardUnknown() {
	xxx_messageInfo_BlockHeader.DiscardUnknown(m)
}

var xxx_messageInfo_BlockHeader proto.InternalMessageInfo

func (m *BlockHeader) GetVersion() int32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *BlockHeader) GetPreviousHash() []byte {
	if m != nil {
		return m.PreviousHash
	}
	return nil
}

func (m *BlockHeader) GetGasLimit() []byte {
	if m != nil {
		return m.GasLimit
	}
	return nil
}

func (m *BlockHeader) GetGasUsed() []byte {
	if m != nil {
		return m.GasUsed
	}
	return nil
}

func (m *BlockHeader) GetHeight() int64 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *BlockHeader) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *BlockHeader) GetMerkleRoot() []byte {
	if m != nil {
		return m.MerkleRoot
	}
	return nil
}

func (m *BlockHeader) GetTxHashes() [][]byte {
	if m != nil {
		return m.TxHashes
	}
	return nil
}

func (m *BlockHeader) GetLeaderPubKey() *crypto.Point {
	if m != nil {
		return m.LeaderPubKey
	}
	return nil
}

func (m *BlockHeader) GetMinorPubKeys() []*crypto.Point {
	if m != nil {
		return m.MinorPubKeys
	}
	return nil
}

type BlockData struct {
	TxCount              int32          `protobuf:"varint,1,opt,name=tx_count,json=txCount,proto3" json:"tx_count,omitempty"`
	TxList               []*Transaction `protobuf:"bytes,2,rep,name=tx_list,json=txList,proto3" json:"tx_list,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *BlockData) Reset()         { *m = BlockData{} }
func (m *BlockData) String() string { return proto.CompactTextString(m) }
func (*BlockData) ProtoMessage()    {}
func (*BlockData) Descriptor() ([]byte, []int) {
	return fileDescriptor_data_a77089e568de0f75, []int{1}
}
func (m *BlockData) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BlockData.Unmarshal(m, b)
}
func (m *BlockData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BlockData.Marshal(b, m, deterministic)
}
func (dst *BlockData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BlockData.Merge(dst, src)
}
func (m *BlockData) XXX_Size() int {
	return xxx_messageInfo_BlockData.Size(m)
}
func (m *BlockData) XXX_DiscardUnknown() {
	xxx_messageInfo_BlockData.DiscardUnknown(m)
}

var xxx_messageInfo_BlockData proto.InternalMessageInfo

func (m *BlockData) GetTxCount() int32 {
	if m != nil {
		return m.TxCount
	}
	return 0
}

func (m *BlockData) GetTxList() []*Transaction {
	if m != nil {
		return m.TxList
	}
	return nil
}

type Block struct {
	Header               *BlockHeader      `protobuf:"bytes,2,opt,name=header,proto3" json:"header,omitempty"`
	Data                 *BlockData        `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	MultiSig             *crypto.Signature `protobuf:"bytes,4,opt,name=multi_sig,json=multiSig,proto3" json:"multi_sig,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *Block) Reset()         { *m = Block{} }
func (m *Block) String() string { return proto.CompactTextString(m) }
func (*Block) ProtoMessage()    {}
func (*Block) Descriptor() ([]byte, []int) {
	return fileDescriptor_data_a77089e568de0f75, []int{2}
}
func (m *Block) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Block.Unmarshal(m, b)
}
func (m *Block) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Block.Marshal(b, m, deterministic)
}
func (dst *Block) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Block.Merge(dst, src)
}
func (m *Block) XXX_Size() int {
	return xxx_messageInfo_Block.Size(m)
}
func (m *Block) XXX_DiscardUnknown() {
	xxx_messageInfo_Block.DiscardUnknown(m)
}

var xxx_messageInfo_Block proto.InternalMessageInfo

func (m *Block) GetHeader() *BlockHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *Block) GetData() *BlockData {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *Block) GetMultiSig() *crypto.Signature {
	if m != nil {
		return m.MultiSig
	}
	return nil
}

type TransactionData struct {
	Version              int32         `protobuf:"varint,1,opt,name=version,proto3" json:"version,omitempty"`
	Nonce                int64         `protobuf:"varint,2,opt,name=nonce,proto3" json:"nonce,omitempty"`
	To                   string        `protobuf:"bytes,3,opt,name=to,proto3" json:"to,omitempty"`
	Amount               []byte        `protobuf:"bytes,4,opt,name=amount,proto3" json:"amount,omitempty"`
	GasPrice             []byte        `protobuf:"bytes,5,opt,name=gas_price,json=gasPrice,proto3" json:"gas_price,omitempty"`
	GasLimit             []byte        `protobuf:"bytes,6,opt,name=gas_limit,json=gasLimit,proto3" json:"gas_limit,omitempty"`
	Timestamp            int64         `protobuf:"varint,7,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	PubKey               *crypto.Point `protobuf:"bytes,8,opt,name=pub_key,json=pubKey,proto3" json:"pub_key,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *TransactionData) Reset()         { *m = TransactionData{} }
func (m *TransactionData) String() string { return proto.CompactTextString(m) }
func (*TransactionData) ProtoMessage()    {}
func (*TransactionData) Descriptor() ([]byte, []int) {
	return fileDescriptor_data_a77089e568de0f75, []int{3}
}
func (m *TransactionData) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TransactionData.Unmarshal(m, b)
}
func (m *TransactionData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TransactionData.Marshal(b, m, deterministic)
}
func (dst *TransactionData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TransactionData.Merge(dst, src)
}
func (m *TransactionData) XXX_Size() int {
	return xxx_messageInfo_TransactionData.Size(m)
}
func (m *TransactionData) XXX_DiscardUnknown() {
	xxx_messageInfo_TransactionData.DiscardUnknown(m)
}

var xxx_messageInfo_TransactionData proto.InternalMessageInfo

func (m *TransactionData) GetVersion() int32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *TransactionData) GetNonce() int64 {
	if m != nil {
		return m.Nonce
	}
	return 0
}

func (m *TransactionData) GetTo() string {
	if m != nil {
		return m.To
	}
	return ""
}

func (m *TransactionData) GetAmount() []byte {
	if m != nil {
		return m.Amount
	}
	return nil
}

func (m *TransactionData) GetGasPrice() []byte {
	if m != nil {
		return m.GasPrice
	}
	return nil
}

func (m *TransactionData) GetGasLimit() []byte {
	if m != nil {
		return m.GasLimit
	}
	return nil
}

func (m *TransactionData) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *TransactionData) GetPubKey() *crypto.Point {
	if m != nil {
		return m.PubKey
	}
	return nil
}

type Transaction struct {
	Data                 *TransactionData  `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	Sig                  *crypto.Signature `protobuf:"bytes,2,opt,name=sig,proto3" json:"sig,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *Transaction) Reset()         { *m = Transaction{} }
func (m *Transaction) String() string { return proto.CompactTextString(m) }
func (*Transaction) ProtoMessage()    {}
func (*Transaction) Descriptor() ([]byte, []int) {
	return fileDescriptor_data_a77089e568de0f75, []int{4}
}
func (m *Transaction) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Transaction.Unmarshal(m, b)
}
func (m *Transaction) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Transaction.Marshal(b, m, deterministic)
}
func (dst *Transaction) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Transaction.Merge(dst, src)
}
func (m *Transaction) XXX_Size() int {
	return xxx_messageInfo_Transaction.Size(m)
}
func (m *Transaction) XXX_DiscardUnknown() {
	xxx_messageInfo_Transaction.DiscardUnknown(m)
}

var xxx_messageInfo_Transaction proto.InternalMessageInfo

func (m *Transaction) GetData() *TransactionData {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *Transaction) GetSig() *crypto.Signature {
	if m != nil {
		return m.Sig
	}
	return nil
}

type MultiSignature struct {
	Sig                  *crypto.Signature `protobuf:"bytes,1,opt,name=sig,proto3" json:"sig,omitempty"`
	Bitmap               []byte            `protobuf:"bytes,2,opt,name=bitmap,proto3" json:"bitmap,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *MultiSignature) Reset()         { *m = MultiSignature{} }
func (m *MultiSignature) String() string { return proto.CompactTextString(m) }
func (*MultiSignature) ProtoMessage()    {}
func (*MultiSignature) Descriptor() ([]byte, []int) {
	return fileDescriptor_data_a77089e568de0f75, []int{5}
}
func (m *MultiSignature) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MultiSignature.Unmarshal(m, b)
}
func (m *MultiSignature) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MultiSignature.Marshal(b, m, deterministic)
}
func (dst *MultiSignature) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MultiSignature.Merge(dst, src)
}
func (m *MultiSignature) XXX_Size() int {
	return xxx_messageInfo_MultiSignature.Size(m)
}
func (m *MultiSignature) XXX_DiscardUnknown() {
	xxx_messageInfo_MultiSignature.DiscardUnknown(m)
}

var xxx_messageInfo_MultiSignature proto.InternalMessageInfo

func (m *MultiSignature) GetSig() *crypto.Signature {
	if m != nil {
		return m.Sig
	}
	return nil
}

func (m *MultiSignature) GetBitmap() []byte {
	if m != nil {
		return m.Bitmap
	}
	return nil
}

func init() {
	proto.RegisterType((*BlockHeader)(nil), "bean.block_header")
	proto.RegisterType((*BlockData)(nil), "bean.block_data")
	proto.RegisterType((*Block)(nil), "bean.block")
	proto.RegisterType((*TransactionData)(nil), "bean.transaction_data")
	proto.RegisterType((*Transaction)(nil), "bean.transaction")
	proto.RegisterType((*MultiSignature)(nil), "bean.multi_signature")
}

func init() { proto.RegisterFile("bean/data.proto", fileDescriptor_data_a77089e568de0f75) }

var fileDescriptor_data_a77089e568de0f75 = []byte{
	// 547 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x53, 0xdd, 0x6e, 0x9c, 0x3c,
	0x14, 0x14, 0x90, 0x85, 0xdd, 0xb3, 0x9b, 0x9f, 0xcf, 0xfa, 0x14, 0xb9, 0x3f, 0x52, 0x11, 0xa9,
	0xaa, 0x55, 0x2e, 0x88, 0xb4, 0x79, 0x84, 0xde, 0x44, 0x6a, 0x54, 0x45, 0x44, 0xbd, 0x2d, 0x32,
	0xac, 0x05, 0xd6, 0x02, 0x46, 0xf8, 0x10, 0xb1, 0x8f, 0xd0, 0xe7, 0xec, 0x5d, 0x9f, 0xa2, 0xb2,
	0x0d, 0xe9, 0x26, 0x4d, 0x7a, 0xc7, 0x1c, 0x9f, 0xb1, 0xc6, 0x33, 0x03, 0x9c, 0x66, 0x9c, 0x35,
	0x57, 0x5b, 0x86, 0x2c, 0x6e, 0x3b, 0x89, 0x92, 0x1c, 0xe9, 0xc1, 0xdb, 0xb3, 0xbc, 0xdb, 0xb7,
	0x28, 0xaf, 0x76, 0x7c, 0x6f, 0xe7, 0xd1, 0x4f, 0x17, 0x56, 0x59, 0x25, 0xf3, 0x5d, 0x5a, 0x72,
	0xb6, 0xe5, 0x1d, 0xa1, 0x10, 0x3c, 0xf0, 0x4e, 0x09, 0xd9, 0x50, 0x27, 0x74, 0xd6, 0xb3, 0x64,
	0x82, 0xe4, 0x02, 0x8e, 0xdb, 0x8e, 0x3f, 0x08, 0xd9, 0xab, 0xb4, 0x64, 0xaa, 0xa4, 0x6e, 0xe8,
	0xac, 0x57, 0xc9, 0x6a, 0x1a, 0xde, 0x30, 0x55, 0x92, 0x77, 0xb0, 0x28, 0x98, 0x4a, 0x2b, 0x51,
	0x0b, 0xa4, 0x9e, 0x59, 0x98, 0x17, 0x4c, 0xdd, 0x6a, 0x4c, 0xde, 0x80, 0xfe, 0x4e, 0x7b, 0xc5,
	0xb7, 0xf4, 0xc8, 0x9c, 0x05, 0x05, 0x53, 0xdf, 0x14, 0xdf, 0x92, 0x73, 0xf0, 0x4b, 0x2e, 0x8a,
	0x12, 0xe9, 0x2c, 0x74, 0xd6, 0x5e, 0x32, 0x22, 0xf2, 0x1e, 0x16, 0x28, 0x6a, 0xae, 0x90, 0xd5,
	0x2d, 0xf5, 0xcd, 0xd1, 0x9f, 0x01, 0xf9, 0x00, 0xcb, 0x9a, 0x77, 0xbb, 0x8a, 0xa7, 0x9d, 0x94,
	0x48, 0x03, 0x73, 0x27, 0xd8, 0x51, 0x22, 0x25, 0x6a, 0x39, 0x38, 0x18, 0xb5, 0x5c, 0xd1, 0x79,
	0xe8, 0x69, 0x39, 0x38, 0xdc, 0x18, 0x4c, 0xae, 0xe1, 0xa4, 0x32, 0x8f, 0x4e, 0xdb, 0x3e, 0x4b,
	0x77, 0x7c, 0x4f, 0x17, 0xa1, 0xb3, 0x5e, 0x6e, 0x8e, 0x63, 0x6b, 0x53, 0xdc, 0x4a, 0xd1, 0x60,
	0xb2, 0xb2, 0x4b, 0x77, 0x7d, 0xf6, 0x85, 0xef, 0x35, 0xa9, 0x16, 0x8d, 0x7c, 0xe4, 0x28, 0x0a,
	0xa1, 0xf7, 0x02, 0xc9, 0x2c, 0x59, 0x8e, 0x8a, 0xee, 0x01, 0xac, 0xc9, 0x3a, 0x11, 0x6d, 0x03,
	0x0e, 0x69, 0x2e, 0xfb, 0x06, 0x27, 0x8f, 0x71, 0xf8, 0xac, 0x21, 0xb9, 0x84, 0x00, 0x87, 0xb4,
	0x12, 0x0a, 0xa9, 0x6b, 0xae, 0xfd, 0x2f, 0xd6, 0xc1, 0xc5, 0xd8, 0xb1, 0x46, 0xb1, 0x1c, 0x85,
	0x6c, 0x12, 0x1f, 0x87, 0x5b, 0xa1, 0x30, 0xfa, 0xe1, 0xc0, 0xcc, 0xdc, 0x4a, 0x2e, 0xb5, 0x79,
	0x5a, 0xa3, 0x89, 0x64, 0xb9, 0x21, 0x96, 0x74, 0x98, 0x6b, 0x32, 0x6e, 0x90, 0x8f, 0x70, 0xa4,
	0x45, 0x98, 0x6c, 0x96, 0x9b, 0xb3, 0xc3, 0x4d, 0x3d, 0x4f, 0xcc, 0x29, 0x89, 0x61, 0x51, 0xf7,
	0x15, 0x8a, 0x54, 0x89, 0xc2, 0x44, 0xa5, 0x95, 0x8c, 0x0f, 0x54, 0xa2, 0x68, 0x18, 0xf6, 0x1d,
	0x4f, 0xe6, 0x66, 0xe7, 0x5e, 0x14, 0xd1, 0x2f, 0x07, 0xce, 0x0e, 0x34, 0xda, 0x77, 0xbe, 0x5e,
	0xa5, 0xff, 0x61, 0xd6, 0xc8, 0x26, 0xe7, 0x46, 0xaf, 0x97, 0x58, 0x40, 0x4e, 0xc0, 0x45, 0x69,
	0x84, 0x2d, 0x12, 0x17, 0xa5, 0xee, 0x04, 0xab, 0x8d, 0x4b, 0xb6, 0x2c, 0x23, 0x9a, 0x3a, 0xd6,
	0x76, 0x22, 0xe7, 0xa6, 0x2e, 0xb6, 0x63, 0x77, 0x1a, 0x3f, 0x2d, 0xa0, 0xff, 0xac, 0x80, 0x4f,
	0xda, 0x14, 0x3c, 0x6f, 0xd3, 0x27, 0x08, 0xa6, 0x22, 0xcc, 0x5f, 0x2a, 0x82, 0xdf, 0x9a, 0x38,
	0xa3, 0xef, 0xb0, 0x3c, 0x78, 0x2b, 0xb9, 0x1c, 0x1d, 0x75, 0x0c, 0xe7, 0xfc, 0xaf, 0xc0, 0x0e,
	0x7d, 0xbd, 0x00, 0x4f, 0x3b, 0xea, 0xbe, 0xe6, 0xa8, 0x3e, 0x8d, 0xbe, 0xc2, 0xe9, 0xa3, 0xf9,
	0x76, 0x3e, 0xf1, 0x9c, 0x7f, 0xf1, 0xb4, 0x5f, 0x99, 0xc0, 0x9a, 0xb5, 0xe3, 0x9f, 0x39, 0xa2,
	0xcc, 0x37, 0xbf, 0xfa, 0xf5, 0xef, 0x00, 0x00, 0x00, 0xff, 0xff, 0xda, 0x79, 0x54, 0x63, 0x15,
	0x04, 0x00, 0x00,
}
