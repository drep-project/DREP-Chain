// Code generated by protoc-gen-go. DO NOT EDIT.
// source: crypto_types.proto

package network

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Point struct {
	X                    []byte   `protobuf:"bytes,1,opt,name=x,proto3" json:"x,omitempty"`
	Y                    []byte   `protobuf:"bytes,2,opt,name=y,proto3" json:"y,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Point) Reset()         { *m = Point{} }
func (m *Point) String() string { return proto.CompactTextString(m) }
func (*Point) ProtoMessage()    {}
func (*Point) Descriptor() ([]byte, []int) {
	return fileDescriptor_crypto_types_b9f77d24c67a5c49, []int{0}
}
func (m *Point) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Point.Unmarshal(m, b)
}
func (m *Point) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Point.Marshal(b, m, deterministic)
}
func (dst *Point) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Point.Merge(dst, src)
}
func (m *Point) XXX_Size() int {
	return xxx_messageInfo_Point.Size(m)
}
func (m *Point) XXX_DiscardUnknown() {
	xxx_messageInfo_Point.DiscardUnknown(m)
}

var xxx_messageInfo_Point proto.InternalMessageInfo

func (m *Point) GetX() []byte {
	if m != nil {
		return m.X
	}
	return nil
}

func (m *Point) GetY() []byte {
	if m != nil {
		return m.Y
	}
	return nil
}

type PrivateKey struct {
	Prv                  []byte   `protobuf:"bytes,1,opt,name=prv,proto3" json:"prv,omitempty"`
	PubKey               *Point   `protobuf:"bytes,2,opt,name=pub_key,json=pubKey,proto3" json:"pub_key,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PrivateKey) Reset()         { *m = PrivateKey{} }
func (m *PrivateKey) String() string { return proto.CompactTextString(m) }
func (*PrivateKey) ProtoMessage()    {}
func (*PrivateKey) Descriptor() ([]byte, []int) {
	return fileDescriptor_crypto_types_b9f77d24c67a5c49, []int{1}
}
func (m *PrivateKey) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PrivateKey.Unmarshal(m, b)
}
func (m *PrivateKey) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PrivateKey.Marshal(b, m, deterministic)
}
func (dst *PrivateKey) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PrivateKey.Merge(dst, src)
}
func (m *PrivateKey) XXX_Size() int {
	return xxx_messageInfo_PrivateKey.Size(m)
}
func (m *PrivateKey) XXX_DiscardUnknown() {
	xxx_messageInfo_PrivateKey.DiscardUnknown(m)
}

var xxx_messageInfo_PrivateKey proto.InternalMessageInfo

func (m *PrivateKey) GetPrv() []byte {
	if m != nil {
		return m.Prv
	}
	return nil
}

func (m *PrivateKey) GetPubKey() *Point {
	if m != nil {
		return m.PubKey
	}
	return nil
}

type Signature struct {
	R                    []byte   `protobuf:"bytes,1,opt,name=r,proto3" json:"r,omitempty"`
	S                    []byte   `protobuf:"bytes,2,opt,name=s,proto3" json:"s,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Signature) Reset()         { *m = Signature{} }
func (m *Signature) String() string { return proto.CompactTextString(m) }
func (*Signature) ProtoMessage()    {}
func (*Signature) Descriptor() ([]byte, []int) {
	return fileDescriptor_crypto_types_b9f77d24c67a5c49, []int{2}
}
func (m *Signature) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Signature.Unmarshal(m, b)
}
func (m *Signature) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Signature.Marshal(b, m, deterministic)
}
func (dst *Signature) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Signature.Merge(dst, src)
}
func (m *Signature) XXX_Size() int {
	return xxx_messageInfo_Signature.Size(m)
}
func (m *Signature) XXX_DiscardUnknown() {
	xxx_messageInfo_Signature.DiscardUnknown(m)
}

var xxx_messageInfo_Signature proto.InternalMessageInfo

func (m *Signature) GetR() []byte {
	if m != nil {
		return m.R
	}
	return nil
}

func (m *Signature) GetS() []byte {
	if m != nil {
		return m.S
	}
	return nil
}

type CommandOfWord struct {
	Msg                  []byte   `protobuf:"bytes,1,opt,name=msg,proto3" json:"msg,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CommandOfWord) Reset()         { *m = CommandOfWord{} }
func (m *CommandOfWord) String() string { return proto.CompactTextString(m) }
func (*CommandOfWord) ProtoMessage()    {}
func (*CommandOfWord) Descriptor() ([]byte, []int) {
	return fileDescriptor_crypto_types_b9f77d24c67a5c49, []int{3}
}
func (m *CommandOfWord) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CommandOfWord.Unmarshal(m, b)
}
func (m *CommandOfWord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CommandOfWord.Marshal(b, m, deterministic)
}
func (dst *CommandOfWord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CommandOfWord.Merge(dst, src)
}
func (m *CommandOfWord) XXX_Size() int {
	return xxx_messageInfo_CommandOfWord.Size(m)
}
func (m *CommandOfWord) XXX_DiscardUnknown() {
	xxx_messageInfo_CommandOfWord.DiscardUnknown(m)
}

var xxx_messageInfo_CommandOfWord proto.InternalMessageInfo

func (m *CommandOfWord) GetMsg() []byte {
	if m != nil {
		return m.Msg
	}
	return nil
}

type Ticket struct {
	PubKey               *Point     `protobuf:"bytes,1,opt,name=pub_key,json=pubKey,proto3" json:"pub_key,omitempty"`
	SigOfWord            *Signature `protobuf:"bytes,2,opt,name=sig_of_word,json=sigOfWord,proto3" json:"sig_of_word,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *Ticket) Reset()         { *m = Ticket{} }
func (m *Ticket) String() string { return proto.CompactTextString(m) }
func (*Ticket) ProtoMessage()    {}
func (*Ticket) Descriptor() ([]byte, []int) {
	return fileDescriptor_crypto_types_b9f77d24c67a5c49, []int{4}
}
func (m *Ticket) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Ticket.Unmarshal(m, b)
}
func (m *Ticket) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Ticket.Marshal(b, m, deterministic)
}
func (dst *Ticket) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Ticket.Merge(dst, src)
}
func (m *Ticket) XXX_Size() int {
	return xxx_messageInfo_Ticket.Size(m)
}
func (m *Ticket) XXX_DiscardUnknown() {
	xxx_messageInfo_Ticket.DiscardUnknown(m)
}

var xxx_messageInfo_Ticket proto.InternalMessageInfo

func (m *Ticket) GetPubKey() *Point {
	if m != nil {
		return m.PubKey
	}
	return nil
}

func (m *Ticket) GetSigOfWord() *Signature {
	if m != nil {
		return m.SigOfWord
	}
	return nil
}

type SignalOfStart struct {
	Mark                 int32    `protobuf:"varint,1,opt,name=mark,proto3" json:"mark,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SignalOfStart) Reset()         { *m = SignalOfStart{} }
func (m *SignalOfStart) String() string { return proto.CompactTextString(m) }
func (*SignalOfStart) ProtoMessage()    {}
func (*SignalOfStart) Descriptor() ([]byte, []int) {
	return fileDescriptor_crypto_types_b9f77d24c67a5c49, []int{5}
}
func (m *SignalOfStart) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SignalOfStart.Unmarshal(m, b)
}
func (m *SignalOfStart) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SignalOfStart.Marshal(b, m, deterministic)
}
func (dst *SignalOfStart) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SignalOfStart.Merge(dst, src)
}
func (m *SignalOfStart) XXX_Size() int {
	return xxx_messageInfo_SignalOfStart.Size(m)
}
func (m *SignalOfStart) XXX_DiscardUnknown() {
	xxx_messageInfo_SignalOfStart.DiscardUnknown(m)
}

var xxx_messageInfo_SignalOfStart proto.InternalMessageInfo

func (m *SignalOfStart) GetMark() int32 {
	if m != nil {
		return m.Mark
	}
	return 0
}

type Commitment struct {
	PubKey               *Point   `protobuf:"bytes,1,opt,name=pub_key,json=pubKey,proto3" json:"pub_key,omitempty"`
	Q                    *Point   `protobuf:"bytes,2,opt,name=q,proto3" json:"q,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Commitment) Reset()         { *m = Commitment{} }
func (m *Commitment) String() string { return proto.CompactTextString(m) }
func (*Commitment) ProtoMessage()    {}
func (*Commitment) Descriptor() ([]byte, []int) {
	return fileDescriptor_crypto_types_b9f77d24c67a5c49, []int{6}
}
func (m *Commitment) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Commitment.Unmarshal(m, b)
}
func (m *Commitment) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Commitment.Marshal(b, m, deterministic)
}
func (dst *Commitment) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Commitment.Merge(dst, src)
}
func (m *Commitment) XXX_Size() int {
	return xxx_messageInfo_Commitment.Size(m)
}
func (m *Commitment) XXX_DiscardUnknown() {
	xxx_messageInfo_Commitment.DiscardUnknown(m)
}

var xxx_messageInfo_Commitment proto.InternalMessageInfo

func (m *Commitment) GetPubKey() *Point {
	if m != nil {
		return m.PubKey
	}
	return nil
}

func (m *Commitment) GetQ() *Point {
	if m != nil {
		return m.Q
	}
	return nil
}

type Challenge struct {
	GroupPubKey          *Point   `protobuf:"bytes,1,opt,name=group_pub_key,json=groupPubKey,proto3" json:"group_pub_key,omitempty"`
	GroupQ               *Point   `protobuf:"bytes,2,opt,name=group_q,json=groupQ,proto3" json:"group_q,omitempty"`
	Msg                  []byte   `protobuf:"bytes,3,opt,name=msg,proto3" json:"msg,omitempty"`
	R                    []byte   `protobuf:"bytes,4,opt,name=r,proto3" json:"r,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Challenge) Reset()         { *m = Challenge{} }
func (m *Challenge) String() string { return proto.CompactTextString(m) }
func (*Challenge) ProtoMessage()    {}
func (*Challenge) Descriptor() ([]byte, []int) {
	return fileDescriptor_crypto_types_b9f77d24c67a5c49, []int{7}
}
func (m *Challenge) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Challenge.Unmarshal(m, b)
}
func (m *Challenge) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Challenge.Marshal(b, m, deterministic)
}
func (dst *Challenge) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Challenge.Merge(dst, src)
}
func (m *Challenge) XXX_Size() int {
	return xxx_messageInfo_Challenge.Size(m)
}
func (m *Challenge) XXX_DiscardUnknown() {
	xxx_messageInfo_Challenge.DiscardUnknown(m)
}

var xxx_messageInfo_Challenge proto.InternalMessageInfo

func (m *Challenge) GetGroupPubKey() *Point {
	if m != nil {
		return m.GroupPubKey
	}
	return nil
}

func (m *Challenge) GetGroupQ() *Point {
	if m != nil {
		return m.GroupQ
	}
	return nil
}

func (m *Challenge) GetMsg() []byte {
	if m != nil {
		return m.Msg
	}
	return nil
}

func (m *Challenge) GetR() []byte {
	if m != nil {
		return m.R
	}
	return nil
}

type Response struct {
	PubKey               *Point   `protobuf:"bytes,1,opt,name=pub_key,json=pubKey,proto3" json:"pub_key,omitempty"`
	S                    []byte   `protobuf:"bytes,2,opt,name=s,proto3" json:"s,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Response) Reset()         { *m = Response{} }
func (m *Response) String() string { return proto.CompactTextString(m) }
func (*Response) ProtoMessage()    {}
func (*Response) Descriptor() ([]byte, []int) {
	return fileDescriptor_crypto_types_b9f77d24c67a5c49, []int{8}
}
func (m *Response) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Response.Unmarshal(m, b)
}
func (m *Response) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Response.Marshal(b, m, deterministic)
}
func (dst *Response) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Response.Merge(dst, src)
}
func (m *Response) XXX_Size() int {
	return xxx_messageInfo_Response.Size(m)
}
func (m *Response) XXX_DiscardUnknown() {
	xxx_messageInfo_Response.DiscardUnknown(m)
}

var xxx_messageInfo_Response proto.InternalMessageInfo

func (m *Response) GetPubKey() *Point {
	if m != nil {
		return m.PubKey
	}
	return nil
}

func (m *Response) GetS() []byte {
	if m != nil {
		return m.S
	}
	return nil
}

func init() {
	proto.RegisterType((*Point)(nil), "network.point")
	proto.RegisterType((*PrivateKey)(nil), "network.private_key")
	proto.RegisterType((*Signature)(nil), "network.signature")
	proto.RegisterType((*CommandOfWord)(nil), "network.command_of_word")
	proto.RegisterType((*Ticket)(nil), "network.ticket")
	proto.RegisterType((*SignalOfStart)(nil), "network.signal_of_start")
	proto.RegisterType((*Commitment)(nil), "network.commitment")
	proto.RegisterType((*Challenge)(nil), "network.challenge")
	proto.RegisterType((*Response)(nil), "network.response")
}

func init() { proto.RegisterFile("crypto_types.proto", fileDescriptor_crypto_types_b9f77d24c67a5c49) }

var fileDescriptor_crypto_types_b9f77d24c67a5c49 = []byte{
	// 337 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x92, 0xb1, 0x6e, 0xe2, 0x40,
	0x10, 0x86, 0xb5, 0x07, 0x98, 0x63, 0xcc, 0x1d, 0xa7, 0xad, 0x28, 0xae, 0x88, 0x16, 0x45, 0xa4,
	0xa2, 0x20, 0x4f, 0x90, 0x2e, 0x52, 0x8a, 0x24, 0x4e, 0x91, 0xd2, 0x32, 0x66, 0x70, 0x2c, 0xe3,
	0xdd, 0x65, 0x76, 0x0d, 0xf8, 0x0d, 0xf2, 0xd8, 0xd1, 0xae, 0x6d, 0x94, 0x14, 0xa0, 0xa4, 0x9b,
	0xf1, 0xcc, 0xfc, 0xdf, 0xef, 0x99, 0x05, 0x9e, 0x52, 0xad, 0xad, 0x8a, 0x6d, 0xad, 0xd1, 0x2c,
	0x34, 0x29, 0xab, 0xf8, 0x50, 0xa2, 0x3d, 0x28, 0x2a, 0xc4, 0x0c, 0x06, 0x5a, 0xe5, 0xd2, 0xf2,
	0x31, 0xb0, 0xe3, 0x94, 0x5d, 0xb1, 0x9b, 0x71, 0xc4, 0x8e, 0x2e, 0xab, 0xa7, 0xbf, 0x9a, 0xac,
	0x16, 0xf7, 0x10, 0x6a, 0xca, 0xf7, 0x89, 0xc5, 0xb8, 0xc0, 0x9a, 0xff, 0x83, 0x9e, 0xa6, 0x7d,
	0xdb, 0xec, 0x42, 0x3e, 0x87, 0xa1, 0xae, 0x56, 0xae, 0xe8, 0x87, 0xc2, 0xe5, 0xdf, 0x45, 0x0b,
	0x58, 0x78, 0xf5, 0x28, 0xd0, 0xd5, 0xea, 0x01, 0x6b, 0x31, 0x87, 0x91, 0xc9, 0x33, 0x99, 0xd8,
	0x8a, 0xd0, 0x41, 0xa8, 0x43, 0x92, 0xcb, 0x4c, 0x87, 0x34, 0x62, 0x06, 0x93, 0x54, 0x95, 0x65,
	0x22, 0xd7, 0xb1, 0xda, 0xc4, 0x07, 0x45, 0x6b, 0x87, 0x2d, 0x4d, 0xd6, 0x61, 0x4b, 0x93, 0x09,
	0x84, 0xc0, 0xe6, 0x69, 0x81, 0xf6, 0xb3, 0x01, 0x76, 0xc9, 0x00, 0x5f, 0x42, 0x68, 0xf2, 0xac,
	0xd3, 0x6c, 0xdd, 0xf2, 0x53, 0xf3, 0xc9, 0x5c, 0xe4, 0x7c, 0x3e, 0x6e, 0x5e, 0x15, 0xad, 0xc5,
	0x35, 0x4c, 0xfc, 0xf7, 0xad, 0x1b, 0x33, 0x36, 0x21, 0xcb, 0x39, 0xf4, 0xcb, 0x84, 0x0a, 0x0f,
	0x1b, 0x44, 0x3e, 0x16, 0x2f, 0x00, 0xce, 0x72, 0x6e, 0x4b, 0x94, 0x3f, 0x70, 0xf4, 0x1f, 0xd8,
	0xee, 0xcc, 0xd6, 0xd8, 0x4e, 0xbc, 0x33, 0x18, 0xa5, 0x6f, 0xc9, 0x76, 0x8b, 0x32, 0x43, 0xbe,
	0x84, 0x3f, 0x19, 0xa9, 0x4a, 0xc7, 0x97, 0xa5, 0x43, 0xdf, 0xf4, 0xd4, 0xe8, 0xcf, 0x61, 0xd8,
	0xcc, 0x9c, 0xa3, 0x04, 0xbe, 0xfc, 0xdc, 0xed, 0xb7, 0x77, 0xda, 0x6f, 0x73, 0xa0, 0x7e, 0x7b,
	0x20, 0x71, 0x07, 0xbf, 0x09, 0x8d, 0x56, 0xd2, 0xe0, 0xf7, 0xff, 0xee, 0xcb, 0x55, 0x57, 0x81,
	0x7f, 0x7d, 0xb7, 0x1f, 0x01, 0x00, 0x00, 0xff, 0xff, 0xac, 0xdd, 0x49, 0x4a, 0x93, 0x02, 0x00,
	0x00,
}
